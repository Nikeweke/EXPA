{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{207:function(t,e,s){\"use strict\";s.r(e);var a=s(0),n=Object(a.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"content\"},[t._m(0),t._v(\" \"),s(\"p\",[t._v(\"Содержание\\n\")]),t._m(1),s(\"p\"),t._v(\" \"),s(\"hr\"),t._v(\" \"),t._m(2),t._v(\" \"),s(\"p\",[t._v(\"Коротко - главное это тесты в проекте, а потом уже предпочтения к окружению, желание после тестов деплоить на сервер. CI запускает тесты и ставит статусы каждому пушу.\")]),t._v(\" \"),s(\"p\",[t._v(\"Continuous Integration — это практика разработки программного обеспечения, которая заключается в слиянии рабочих копий в общую основную ветвь разработки несколько раз в день и выполнении частых автоматизированных сборок проекта для скорейшего выявления потенциальных дефектов и решения интеграционных проблем. В обычном проекте, где над разными частями системы разработчики трудятся независимо, стадия интеграции является заключительной. Она может непредсказуемо задержать окончание работ. Переход к непрерывной интеграции позволяет снизить трудоёмкость интеграции и сделать её более предсказуемой за счет раннего обнаружения и устранения ошибок и противоречий. Основным преимуществом является сокращение стоимости исправления дефекта, за счёт раннего его выявления.\")]),t._v(\" \"),t._m(3),t._v(\" \"),t._m(4),t._v(\" \"),s(\"p\",[t._v(\"В процессе работы мне часто приходится обновлять сервисы и разворачивать их на конечные сервера. Когда проектов было мало, это не составляло особых проблем, т.к. релизы были редкими, развертывания выполнялись довольно редко. Тесты выполнялись вручную. Со временем, проектов и задач становилось больше, и выполнение однотипных задач стало занимать больше времени. Рассмотрим классический процесс решения задачи, подходящий для большинства компаний:\")]),t._v(\" \"),t._m(5),t._v(\" \"),s(\"p\",[t._v(\"Этот процесс повторяется для каждой задачи, если вы 10 дней писали код и на сборку/развертывание потратили 1 час, то это выглядит разумно и не трудозатратно. Но что если вы поправили мелкий баг за 1 минуту, но на развертывание потратите тот же час? В этой ситуации это выглядит довольно расточительно. А если вам нужно выполнять в день 10 — 20 багфиксов (bugfix, исправление ошибки)?\")]),t._v(\" \"),s(\"p\",[t._v(\"Первый путь, укрупнять пул реквесты и делать объединение в мастер как можно реже. Второй путь настроить CI чтобы процесс тестирования/построения/развертывания выполнялся автоматически. Делать ревью больших пул реквестов неудобно, поэтому мы пойдем вторым путем.\")]),t._v(\" \"),t._m(6),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"https://travis-ci.org/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"TravisCI\"),s(\"OutboundLink\")],1)]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"https://docs.gitlab.com/ee/ci/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"GitlabCI\"),s(\"OutboundLink\")],1)]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"https://circleci.com/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"CircleCI\"),s(\"OutboundLink\")],1)]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"https://codeship.com/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"CodeShip\"),s(\"OutboundLink\")],1)])]),t._v(\" \"),t._m(7),t._v(\" \"),t._m(8),t._m(9)])},[function(){var t=this.$createElement,e=this._self._c||t;return e(\"h1\",{attrs:{id:\"intro\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#intro\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Intro\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"div\",{staticClass:\"table-of-contents\"},[e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#что-такое-ci\"}},[this._v(\"Что такое CI?\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#зачем-это-нужно\"}},[this._v(\"Зачем это нужно?\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#сервисы-ci-cd\"}},[this._v(\"Сервисы CI/CD\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#пример\"}},[this._v(\"Пример\")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"что-такое-ci\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#что-такое-ci\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Что такое CI?\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ul\",[e(\"li\",[this._v(\"Continuous Integration (CI)\")]),this._v(\" \"),e(\"li\",[this._v(\"Continuous Delivery (CD)\")]),this._v(\" \"),e(\"li\",[this._v(\"Continuous Deployment (CD)\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"зачем-это-нужно\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#зачем-это-нужно\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Зачем это нужно?\")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"ul\",[s(\"li\",[t._v(\"Берем задачу из списка/Получаем от начальства\")]),t._v(\" \"),s(\"li\",[t._v(\"Создаем новую ветку в git и открываем пул реквест\")]),t._v(\" \"),s(\"li\",[t._v(\"Пишем код\")]),t._v(\" \"),s(\"li\",[t._v(\"Лично или с помощью коллеги выполняем код-ревью (code review — обзор/проверку кода)\")]),t._v(\" \"),s(\"li\",[t._v(\"Запускаем тесты\")]),t._v(\" \"),s(\"li\",[t._v(\"Сливаем ветку в мастер\")]),t._v(\" \"),s(\"li\",[t._v(\"Выполняем сборку проекта\")]),t._v(\" \"),s(\"li\",[t._v(\"Публикуем новую сборку\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"сервисы-ci-cd\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#сервисы-ci-cd\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Сервисы CI/CD\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"пример\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#пример\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" Пример\")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"language-yaml extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-yaml\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# .travis.yml\")]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[t._v(\"language\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" node_js\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[t._v(\"node_js\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"-\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"8\"')]),t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[t._v(\"branches\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[t._v(\"only\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"-\")]),t._v(\" master\\n\")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"language-yaml extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-yaml\"}},[s(\"code\",[t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# .gitlab-ci.yml\")]),t._v(\"\\n\\n \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# The configuration file starts by declaring a docker image that \")]),t._v(\"\\n \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# allows you to specify a certain version of NodeJS you want to use during build time.\")]),t._v(\"\\n \"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[t._v(\"image\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" node\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"latest\\n\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# we define the different continuous integration process it will run.\")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[t._v(\"stages\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"-\")]),t._v(\" build\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"-\")]),t._v(\" test\\n\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# we’ve defined the stages, the configuration includes a cache \")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# that specifies files that should be saved for later to be used between runs or stages.\")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[t._v(\"cache\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[t._v(\"paths\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n      \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"-\")]),t._v(\" node_modules/\\n\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# install_dependencies, in the process of demonstrating the interaction between stages, \")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# we are extracting this step to run its own stage. \")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# Typically, running npm install can be combined with the next testing stages. \")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[t._v(\"install_dependencies\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[t._v(\"stage\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" build\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[t._v(\"script\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n      \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"-\")]),t._v(\" npm install\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[t._v(\"artifacts\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n      \"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[t._v(\"paths\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"-\")]),t._v(\" node_modules/\\n\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# testing_testing(you can name as u want) declares the command that will run the test suit, \")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# Since this is the last stage, it will access what \")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# is been produced by the build stage, which are the project dependencies in our case.\")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[t._v(\"testing_testing\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[t._v(\"stage\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" test\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token key atrule\"}},[t._v(\"script\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" npm test\\n\")])])])}],!1,null,null,null);e.default=n.exports}}]);","extractedComments":[]}